import constants as c
import numpy as np
import os
import pyrosim
from pyrosim import pyrosim
import random as rand
import time


# Recording best values of previous run
a_current = [[-0.06187337513089708, -0.4245328051680266, -0.8419305472209209, -0.16981918641636717, -0.67675297670415, 0.38891024829474174, -0.28044753526707766, 0.1031816374708483, -0.6034418735945628, -0.6382470693435078, -0.632160124427962, 0.22024808063062684],
             [-0.9658057647147591, -0.37407387725110475, 0.04259590766369392, 0.9577547388712211, 0.8513660457368901, 0.45659756424316433, 0.5233624969707038, -0.015299043781524357, 0.4292149289076943, 0.06492240393826298, 0.2078258124043595, 0.5849229022042406],
             [0.5681472365984448, -0.3439635450053784, 0.9903995707580373, -0.29660436519255606, -0.2764141060717469, -0.32738003935792026, 0.8535623049560361, 0.05654531410122754, -0.8805924939663321, -0.07057696764900423, 0.2427827990632656, 0.9014937771648655],
             [-0.9267249019784207, -0.2892268366141866, -0.379930454000202, 0.2061547343561123, -0.7664130480348563, 0.9072278979174158, 0.1526085156297634, 0.09108282751154206, -0.7091489052562852, 0.9536094009145228, -0.2803300197277958, -0.37173837219210526],
             [-0.016154714979257134, -0.3157981817789446, -0.9461416989113205, -0.7087728872821337, 0.17590239931770935, 0.16685463991988425, 0.1412967138175416, 0.8972588220237934, 0.4863587386045425, -0.5075876519200582, 0.854746675335579, 0.7251907423172335],
             [-0.9114561964078509, 0.6185600735196024, 0.5431575581379426, -0.7798097647377686, 0.6937268027363628, -0.756877043296531, -0.2415060580099735, -0.728469630880312, -0.7233705995258379, -0.44233052026418607, -0.7518963680182864, -0.9661637464971196],
             [0.058866768893651056, -0.9513074689275127, -0.3921507484112179, -0.6084141069489002, 0.29101958241748416, -0.3723831359998988, 0.6106494165655427, 0.8109053589142778, -0.2216811454733285, 0.913493930945624, 0.604585763072006, -0.37360408155140656],
             [-0.7098580593429442, 0.49587539811574244, 0.05023845185844045, -0.6369873908827246, 0.2644759671854908, -0.6561260058781517, 0.527303354510779, 0.670648108458886, 0.9736605766560336, -0.19972746063179603, -0.6186591164848714, -0.10161502138263612],
             [-0.5824988422122124, 0.4498851599885372, -0.036660708294435906, 0.38950032693105663, 0.8576936312943702, -0.4972251465089004, -0.34856078111468825, 0.23361598484894364, 0.5366513896992064, -0.452970255457094, -0.10194063749063909, -0.6895354502604081],
             [-0.5865133817990458, -0.5760537680120068, 0.9011483266499152, 0.8367629325353512, 0.209949000584029, 0.8198916407646462, -0.42143028803197424, 0.9717924788205277, -0.933300475910871, -0.8123014353413651, 0.6061703421272493, 0.7099729875453586],
             [-0.313401966008517, -0.6531490733304539, -0.9435126746920608, -0.9266536652236022, 0.9851656593523737, -0.797335219314633, 0.26948191761834384, 0.4680501956085834, 0.9092277531433741, 0.4120936594769826, 0.19873150490906366, -0.5019689618802325],
             [0.43355427746524877, 0.566137712475326, -0.3162951717431235, -0.5785772771484685, 0.12154535197130678, -0.8036227497107222, -0.685955521429646, -0.934600964457575, 0.15614297586785608, 0.8192508351187837, -0.660056045341936, 0.8184269764711323],
             [-0.8880156715891176, 0.24254018904688612, 0.5510631861395485, -0.9519830889208869, 0.421882320334543, 0.22223144770172687, -0.56568996385597, -0.7891126152598331, 0.7259785854074898, -0.6447397717656049, 0.2121769659430479, -0.6189890997678775]]

b_current = [[0.6605234926116759, -0.942071238970164,.14282577206996439,0.882582218226903,.7950462878708877,.45845267011741897,.553120368921366,0.6501768007071127,0.10782623798119895,.13027212969101054,.9484692377286974,0.9155351377597587],
             [0.9825433355518456,0.044900969070960306,0.19067753199733217,0.710061509057907,.27489483665193637,0.8910646173593977,.43679458424800277,0.3847202798777605,.4905089712636128,.6653134050116067,0.8241190388061654,.8360088222052331],
             [0.9981677273269023,0.06745439113528784,0.0964419996312249,0.5903813154710373,0.9569601119827225,0.0010377187750143513,.49054813138139197,.20074648175350251,0.49629009718550643,0.44936947017188755,0.8419766157516841,.663793949979564],
             [.12292562077365421,.01391796496254849,0.14798745784250622,0.17517269497393317,.695344206641942,0.143427756069346,.04676165527713794,.038076230351793194,0.25303856447473416,0.010474501561501759,0.8664937027027273,0.8568756471659067],
             [.8108098649644413,.9458401972418589,.5936966104914703,0.5423807499418065,.7751289338618534,0.35224774667371306,0.7544356528397878,.41798473871742825,.05273629904517718,0.6397776344617736,.9838285735922834,0.8030619098702232],
             [0.6539338047944332,.08556454453542561,.34070319133666693,.4065128085910519,.5357275794417451,.27448748173153326,.6770551387637387,0.3396411423328991,.39480937928647686,.6902324324776234,.36239054427397055,.508313216303915],
             [.5151978507720578,.507342970198813,.38038726436970505,.16064943627626005,.5700210072662959,0.7728706551649613,.7261804524142739,0.15157079441138377,0.033778137170665135,0.8052153984740025,.9156175066634678,.1767689584430372],
             [.5366512314133534,0.7126867521929443,0.7332337925521439,.8593362411887155,.4239846554811997,0.72258277007555,.24441510468761862,.708364325460247,0.6155686194452266,.1295059559579479,.23207450957149667,0.19115105406349486],
             [0.6552155263284638,0.4818374459269128,0.5966312797830173,0.011306568372840609,0.26141090884441875,.4489511642603057,0.7616621958818426,0.6481682597708327,.9754086540129578,0.2671928862260464,.39565449701265365,0.8666614011602498],
             [0.018539728964540148,.6764017260790323,0.5965225569468937,0.34755378367150946,.19688171602946225,0.5466463937373593,0.866516691559978,0.41199260418915706,.8683394441690035,.940164972793714,0.5533510464165934,0.9716269650373006],
             [-0.7458064446520021,0.9715942684401868,0.11658786482326278,-0.32501572738351947,0.9181797206709925,-0.3218676595016565,0.6646677791448306,0.4533342445985,0.6629145437771427,-0.4510569790721326,-0.3158674094364322,0.5496238870673638],
             [-0.4533912500248951,-0.4364436873174111,0.5943560659650171,0.6479002575870256,-0.8547622649976203,0.47892479083903217,0.6899095066899286,0.6768559934379581,0.6575776400057705,0.8629989413782366,0.2427172852175381,0.2097562577312866],
             [-0.5930002250226227,0.2593499943629791,-0.8462501446492507,-0.704217608066044,0.3235727879456942,-0.2892259869224769,-0.012576574816725472,-0.7314066128947989,0.638296110163054,-0.45549988886545045,0.7415492891999969,-0.5106615301443167]]

c_current = [[0.9890079218145844,.7147863026259291,.8535967745990891,0.08835162929907181,.4149032905873331,0.4768747886284872,.7417932202110817,.0023083645181389834,0.8279925825423287,0.06968335848719631,.2938986870702516,.7844162983628207],
             [.19772245866096583,.7689094142331452,.23864647537085215,.06061328332679361,.19718169821472764,0.8006804695880041,.8950942249900287,.3084676380651732,.535793764503941,.09641369252554521,0.6938692893376446,.35698013470885637],
             [.8698756414562481,0.8590984950370617,0.9087903125748855,0.5064893474351455,0.5828800969489207,.5584673447435946,0.043350258385239426,.4097287056114176,0.6007978710475945,0.805740518794783,.8225580560125565,.5063065729437928],
             [0.743673222062454,0.22440136050179715,.17168102349106662,0.5406570993660835,0.14683280511452468,.1920012996279341,.1047677614779221,0.8795069236022113,.15130271385296012,.6965702820265529,0.4625309762100982,.40662843766087176],
             [0.8751548883752023,.9829087092748023,0.9039901487972191,.34415204763253837,.8491904500133112,0.2629398364085431,0.6422261130866063,0.442263812919663,0.003198470992443081,0.9660268292287642,0.2749236918924549,.17249494740644788],
             [.7546734320095994,.6963743116140597,.7569548157717478,0.49139087208793786,.7016739145972404,.19249928498951507,0.26351998326554593,.9304065147526079,.41627693866371707,0.8840392562668502,.01568431540439419,0.2903369799623037],
             [0.9502194071632539,0.21119733912709093,.16060465272547497,.622822714588293,.6103143897507359,.580791108197471,.6417133082905018,.4698838583246163,.5146752965606396,.1352676330917444,0.9971369637947571,0.26924851220935464],
             [0.9281175893518163,.19070197495432395,0.28403215672112037,.7236008487046899,0.03913484532398659,0.19112784004229488,.7954445924198728,.4794316456707379,0.8602904654503098,0.7028340834512627,.9109069230825118,0.6911215583898969],
             [.32001134875630477,0.616966148878854,0.5102243944808462,.021382105701299947,0.5417902290031253,.38142314818002476,0.44556788710600603,0.04555312882614526,0.06925484469541576,0.41506834476051946,0.06779601358656628,0.9553262247328418],
             [0.8488364077254662,.9597974817127204,.9197825346660908,.033188344164033934,.7300341555497785,0.3560924389386513,0.8860151888356036,0.058254746544098124,0.04878015195272822,0.9190448403506977,.8000875230397873,.8153455131944982],
             [-0.2786193970378985,-0.6011653613983203,-0.5723209984867725,-0.05160920767548727,0.8396782555706217,-0.019680572700551124,-0.08714901115020024,-0.01951446268679069,-0.19996588250124625,0.022283689204859236,-0.38850801005155655, -0.9860772077150823],
             [-0.04343745060514426,-0.1890071213341329,-0.23218536154493963,0.44928009677389724,0.8898845138390938,0.3385607676959037,0.052024770775073614,0.07552587225510154,-0.5142793477143874,-0.36426151148000896, 0.41200803418969034,-0.842840152658884],
             [0.0342120609253882,-0.6785462185586835,0.8638483178008267,0.8534583539930576,-0.7504226083053613,-0.1417753266928059,0.8417660528268402,-0.731490876580716,0.8041061592294738,0.7825415355918235,-0.09583457495733172,-0.8927355538525814]]

prior_best_solutions = {"A": a_current, "B": b_current, "C": c_current}

class Solution():
    def __init__(self, weights_by_motor, id):
        self.weights = []
        self.myId = id
        if False:
            pass
        #     self.weights = a_current
        # elif self.myId < 7:
        #     self.weights = b_current
        # elif self.myId < 10:
        #     self.weights = c_current
        else:
            for _ in range(c.numSensorNeurons):
                motor_weights = []
                for _ in range(c.numMotorNeurons):
                    motor_weights.append(rand.random() * 2 - 1)
                self.weights.append(motor_weights)
        # Enforced Homogeneity
        # if (id % 10) < 5:
        #     self.weights = prior_best_solutions["A"]
        # else:
        #     self.weights = prior_best_solutions["A"]
        # Temp weights of Current Run
        # if id == 0:
        #     self.weights = brain0
        # elif id == 1:
        #     self.weights = brain1
        # elif id == 2:
        #     self.weights = brain2
        # elif id == 3:
        #     self.weights = brain3
        # elif id == 4:
        #     self.weights = brain4
        # elif id == 5:
        #     self.weights = brain5
        # elif id == 6:
        #     self.weights = brain6
        # elif id == 7:
        #     self.weights = brain7
        # elif id == 8:
        #     self.weights = brain8
        # elif id == 9:
        #     self.weights = brain9

    def Start_Simulation(self, view_version):
        # Function calls
        self.Create_World()
        self.Generate_Body()
        self.Generate_Brain()

        if view_version != "DIRECT" and view_version != "GUI":
            raise Exception("INVALID VIEWING TYPE GIVEN")

        os.system(f"python3 simulate.py {view_version} {self.myId} 2&>1 &")


    def Wait_For_Simulation_To_End(self):
        while not os.path.exists(f"fitness{self.myId}.txt"):
            time.sleep(0.5)

        f = open(f"fitness{self.myId}.txt", "r")
        fitness_current = f.readline().split(", ")
        self.fitness = fitness_current
        time.sleep(0.5)
        os.system(f"rm fitness{self.myId}.txt")

    def Create_World(self):
        # Creating World
        pyrosim.Start_SDF(f"world{self.myId}.sdf")
        length = 1
        width = 1
        height = 1
        currHeight = 0.5
        totalBoxIdx = 0
        initXPos = -2.5
        initYPos = -2.5

        pyrosim.End()


    def Generate_Body(self):
        # Creating Robot Parts
        pyrosim.Start_URDF(f"body{self.myId}.urdf")
        length = 0.2
        width = 1.0
        height = 0.2
        currHeight = 0.5
        initXPos = 2.5
        initYPos = 2.5
        pyrosim.Send_Cube(name=f"Body", pos=[0, 0, 2], size=[1, 1, 1])
        pyrosim.Send_Joint(name=f"Body_FrontLeg", parent="Body", child="FrontLeg", type="revolute",
                           position=[0, 0.5, 2], jointAxis="1, 0, 0")
        pyrosim.Send_Cube(name=f"FrontLeg", pos=[0, 0.5, 0], size=[length, width, height])
        pyrosim.Send_Joint(name=f"FrontLeg_FrontCalf", parent="FrontLeg", child="FrontCalf", type="revolute",
                           position=[0, 1.0, 0], jointAxis="1, 0, 0")
        pyrosim.Send_Cube(name=f"FrontCalf", pos=[0, 0, -0.5], size=[length, 0.2, 1.0])
        pyrosim.Send_Joint(name=f"Body_BackLeg", parent="Body", child="BackLeg", type="revolute",
                           position=[0, -0.5, 2], jointAxis="1, 0, 0")
        pyrosim.Send_Cube(name=f"BackLeg", pos=[0, -0.5, 0], size=[length, width, height])
        pyrosim.Send_Joint(name=f"BackLeg_BackCalf", parent="BackLeg", child="BackCalf", type="revolute",
                           position=[0, -1.0, 0], jointAxis="1, 0, 0")
        pyrosim.Send_Cube(name=f"BackCalf", pos=[0, 0, -0.5], size=[length, 0.2, 1])
        pyrosim.Send_Joint(name=f"Body_LeftLeg", parent="Body", child="LeftLeg", type="revolute",
                           position=[0.5, 0, 2], jointAxis="0, 1, 0")
        pyrosim.Send_Cube(name=f"LeftLeg", pos=[0.5, 0, 0], size=[1, 0.2, height])
        pyrosim.Send_Joint(name=f"LeftLeg_LeftCalf", parent="LeftLeg", child="LeftCalf", type="revolute",
                           position=[1.0, 0, 0], jointAxis="0, 1, 0")
        pyrosim.Send_Cube(name=f"LeftCalf", pos=[0, 0, -0.5], size=[0.2, 0.2, 1.0])
        pyrosim.Send_Joint(name=f"Body_RightLeg", parent="Body", child="RightLeg", type="revolute",
                           position=[-0.5, 0, 2], jointAxis="0, 1, 0")
        pyrosim.Send_Cube(name=f"RightLeg", pos=[-0.5, 0, 0], size=[1, 0.2, height])
        pyrosim.Send_Joint(name=f"RightLeg_RightCalf", parent="RightLeg", child="RightCalf", type="revolute",
                           position=[-1.0, 0, 0], jointAxis="0, 1, 0")
        pyrosim.Send_Cube(name=f"RightCalf", pos=[0, 0, -0.5], size=[0.2, 0.2, 1.0])

        # Create each of the feet for the robot
        pyrosim.Send_Joint(name=f"RightCalf_RightFoot", parent="RightCalf", child="RightFoot", type="prismatic", position=[0, 0, -1.0], jointAxis="0 0 1")
        pyrosim.Send_Cube(name=f"RightFoot", pos=[0, 0, 0], size=[0.1, 0.1, 1.4])
        pyrosim.Send_Joint(name=f"LeftCalf_LeftFoot", parent="LeftCalf", child="LeftFoot", type="prismatic", position=[0, 0, -1.0], jointAxis="0 0 1")
        pyrosim.Send_Cube(name=f"LeftFoot", pos=[0, 0, 0], size=[0.1, 0.1, 1.4])
        pyrosim.Send_Joint(name=f"FrontCalf_FrontFoot", parent="FrontCalf", child="FrontFoot", type="prismatic", position=[0, 0, -1.0], jointAxis="0 0 1")
        pyrosim.Send_Cube(name=f"FrontFoot", pos=[0, 0, 0], size=[0.1, 0.1, 1.4])
        pyrosim.Send_Joint(name=f"BackCalf_BackFoot", parent="BackCalf", child="BackFoot", type="prismatic", position=[0, 0, -1.0], jointAxis="0 0 1")
        pyrosim.Send_Cube(name=f"BackFoot", pos=[0, 0, 0], size=[0.1, 0.1, 1.4])

        pyrosim.End()


    def Generate_Brain(self):
        pyrosim.Start_NeuralNetwork(f"brain{self.myId}.nndf")
        pyrosim.Send_Sensor_Neuron(name=0, linkName="Body")
        link_index = 1
        # Loop through each of the known links of the robot
        for link in ["FrontLeg", "BackLeg", "RightLeg", "LeftLeg"]:
            pyrosim.Send_Sensor_Neuron(name=link_index, linkName=link)
            pyrosim.Send_Motor_Neuron(name=link_index + c.numSensorNeurons - 1, jointName=f"Body_{link}")
            link_index += 1
        for link in ["Front", "Back", "Right", "Left"]:
            pyrosim.Send_Sensor_Neuron(name=link_index, linkName=link + "Calf")
            pyrosim.Send_Motor_Neuron(name=link_index + c.numSensorNeurons - 1, jointName=f"{link}Leg_{link}Calf")
            link_index += 1
        for link in ["Front", "Back", "Right", "Left"]:
            pyrosim.Send_Sensor_Neuron(name=link_index, linkName=link + "Foot")
            pyrosim.Send_Motor_Neuron(name=link_index + c.numSensorNeurons - 1, jointName=f"{link}Calf_{link}Foot")
            link_index += 1
        # Random Search Functionality
        # Implement from two previous two solutions for two teams (A and B)
        for sensor_synapse in range(0, c.numSensorNeurons):
            for motor_synapse in range(c.numSensorNeurons, c.numSensorNeurons + c.numMotorNeurons):
                pyrosim.Send_Synapse(sourceNeuronName=sensor_synapse, targetNeuronName=motor_synapse, weight=self.weights[sensor_synapse][motor_synapse - c.numSensorNeurons])
        pyrosim.End()
